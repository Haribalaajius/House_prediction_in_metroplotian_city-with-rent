# -*- coding: utf-8 -*-
"""House_price_prediction in Metrolitian city

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ilmvSRiTBi6Hqqnn6vJlP1A6oXR6x7CO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error as mae

df= pd.read_csv("/content/Bengaluru_House_Data.csv")
df

df.shape

df.info()

df.describe

df.isnull()

df.isnull().sum()

df.groupby("area_type")["area_type"].agg("count")

df['area_type'].unique()

plt.figure(figsize=(20,15))
df.area_type.value_counts().plot(kind = 'bar')

df['bath'].unique()

plt.figure(figsize=(30,10))
df.bath.value_counts().plot(kind= 'bar')

(df["area_type"].value_counts()).plot.pie(autopct="%.1f%%",
                                                   # shadow = True,
                                                    rotatelabels = True,
                                                   # wedgeprops={'linewidth':6},
                                                    radius = 2
                                                   )

sns.FacetGrid(df, hue='area_type', height= 6).map(sns.distplot, 'balcony').add_legend()

sns.FacetGrid(df, hue='area_type', height= 6).map(sns.distplot, 'balcony').add_legend()

df = df.drop(["area_type", "availability", "balcony", "society"], axis= 1)
df

df.shape

df.isna().sum()

df=df.dropna()

df.isnull().sum()

df['size'].unique()

df['BHK']= df['size'].apply(lambda x : int(x.split(' ')[0]) )

df.head

plt.figure(figsize=(20,8))
ax = sns.countplot(x= 'BHK', data= df)
for p in ax.patches:
    ax.annotate(int(p.get_height()), (p.get_x()+0.25, p.get_height()+1), va='bottom', color='black')

df['BHK'].unique()

df[df.BHK > 20]

df.total_sqft.unique()

plt.figure(figsize=(20,10))
sns.boxplot(x= 'BHK', y='price', data= df)

plt.figure(figsize=(20,10))
sns.violinplot(x ='BHK', y='bath', data=df)

def isfloat(x):
    try:
        float(x)
    except:
        return False
    return True

df[~df['total_sqft'].apply(isfloat)]

def convert_sqft_to_num(x):
    token = x.split('-')
    if len(token) == 2:
        return (float(token[0]) + float(token[1]))/2
    try:
        return float(x)
    except:
        None

df = df.copy()
df['total_sqft'] = df['total_sqft'].apply(convert_sqft_to_num)

df

df.loc[30]

df = df.copy()
df['price_per_sqft'] = df['price']*1e5/df['total_sqft']

df

df.location.unique()

df.location = df.location.apply(lambda x: x.strip())
location_stats = df.groupby('location')['location'].agg('count').sort_values(ascending = False)
location_stats

len(location_stats[location_stats <= 10])

location_stats_less_than_10 = location_stats[location_stats <= 10]
location_stats_less_than_10

len(df.location.unique())

df.location = df.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)

df

len(df.location.unique())

df.head(10)

df[df.total_sqft/df.BHK<300]

df = df[~(df.total_sqft/df.BHK<300)]
df

df.shape

def remove_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('location'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out, reduced_df], ignore_index= True)
    return df_out
df= remove_outliers(df)
df.shape

def plot_scatter_chart(df, location):
    bhk2= df[(df.location==location) & (df.BHK==2)]
    bhk3= df[(df.location==location) & (df.BHK==3)]
    matplotlib.rcParams['figure.figsize']= (8,5)
    plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', marker='o', label='2 BHK', s=50)
    plt.scatter(bhk3.total_sqft, bhk3.price, color='green', marker='+', label='3 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price (Lakh Indian Rupees)")
    plt.legend()

plot_scatter_chart(df, "Rajaji Nagar")

plt.hist(df.price_per_sqft, rwidth= 0.8)
plt.xlabel("Price Per Square Feet")
plt.ylabel("Count")

df[df.bath > df.BHK+2]

df = df.drop(df[df.bath > df.BHK+2].index)
df

dummies= pd.get_dummies(df.location).astype(int)
dummies.head()

df= pd.concat([df, dummies.drop('other', axis='columns')], axis='columns')
df.head()

df = df.drop('location', axis= 'columns')
df.head()

X = df.drop(['price'], axis='columns')
X.head()

y = df.price
y.head()

X = X.drop(['size'], axis='columns')
X.head()

X = X.drop(['price_per_sqft'], axis='columns')
X.head()

X.shape

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3, random_state= 1)

LR_model= LinearRegression()
LR_model.fit(X_train, y_train)

# Mean absolute Error
X_test_prediction_LR = LR_model.predict(X_test)
LR_test_data_error = mae(X_test_prediction_LR, y_test)

print(' Mean absolute Error on Test Data:',LR_test_data_error)

RFR_model= RandomForestRegressor()
RFR_model.fit(X_train, y_train)

# Mean absolute Error
X_test_prediction_RFR = RFR_model.predict(X_test)
RFR_test_data_error = mae(X_test_prediction_RFR, y_test)

print(' Mean absolute Error on Test Data:',RFR_test_data_error)

DTR_model= DecisionTreeRegressor()
DTR_model.fit(X_train, y_train)

# Mean absolute Error
X_test_prediction_DTR = DTR_model.predict(X_test)
DTR_test_data_error = mae(X_test_prediction_DTR, y_test)

print(' Mean absolute Error on Test Data:',DTR_test_data_error)

errors = [LR_test_data_error, RFR_test_data_error, DTR_test_data_error]
model_names = ['Linear Regression', 'Random Forest Regression', 'Decision Tree Regression']

x= np.arange(len(errors))
plt.figure(figsize=(20, 10))
colors= ['orange', 'green', 'blue']
plt.bar(x,errors, color=colors)

plt.xticks(x, model_names, rotation=0)
plt.xlabel('Test Data Error')
plt.ylabel('Frequency')
plt.title('Histogram of Test Data Errors')


plt.show()

def predict_price(location, sqft, bath, bhk):
    loc_index= np.where(X.columns==location)[0][0]

    x=np.zeros(len(X.columns))
    x[0] = sqft
    x[1] = bath
    x[2] = bhk
    if loc_index >=0:
        x[loc_index] = 1

    return LR_model.predict([x])[0]

predict_price('1st Phase JP Nagar',1000, 2, 2)

predict_price('1st Phase JP Nagar',400, 6, 4)